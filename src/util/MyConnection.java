package util;

import java.sql.Connection;
import readproperties.ReadDBConfig;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import myexception.FreeConnectionException;

public class MyConnection extends AbstractConnection{

    private int index;
    private static Connection conn;
//    private String driver = "com.mysql.jdbc.Driver";

    static {
        try {
            // 用于加载驱动类的字符串不写死，从配置文件中获取，这样更好。
            // 同时我在lib中导入了两个数据库的包 5.x 版本 和 8.x版本
            // 这样无论用户在配置文件中写的是 com.mysql.jdbc.Driver(5.x版本写法)
            // 还是 com.mysql.cj.jdbc.Driver(8.x写法)
            // 我都能完成驱动类的加载
            Class.forName(ReadDBConfig.getInstance().getDriver());  // 加载驱动类
            conn = ReadDBConfig.getInstance().getURLConnection();  // 获取连接
        } catch (ClassNotFoundException e){
            e.printStackTrace();
        } catch (SQLException e){
            e.printStackTrace();
        }
    }

    public MyConnection(){}
    public MyConnection(int index){
        this.index = index;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return conn.createStatement();
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return conn.prepareStatement(sql);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException{
        return conn.prepareStatement(sql, autoGeneratedKeys);
    }


    @Override
    public void close() throws SQLException{
        try{
            ConnectionPool.freeConnection(this);
        } catch (FreeConnectionException e){
            e.printStackTrace();
        }
    }
}
